#include "common.hlsl"

static int num_samples3 = 1;
static float weights3[1] = {0.5};
static float offsets3[1] = {0.00133183668478};

static int num_samples15 = 4;
static float weights15[4] = {0.298355046652, 0.176060532523, 0.0245051901481, 0.00107923067655};
static float offsets15[4] = {0.632248402962, 2.31943650209, 4.20400430052, 6.12276070905};

static int num_samples35 = 9;
static float weights35[9] = {0.132695884237, 0.152836868572, 0.107546260959, 0.0619058813094, 0.0291489148416, 0.0112265432142, 0.00353653051015, 0.000911143284098, 0.000191973072917};
static float offsets35[9] = {0.660992729706, 2.46826036979, 4.44304008052, 6.41811006319, 8.39359152351, 10.3695975402, 12.3462311284, 14.3235837001, 16.3017339601};

static int num_samples63 = 16;
static float weights63[16] = {0.0737761167925, 0.0940772082171, 0.0845259696535, 0.0714377313743, 0.0567932559021, 0.0424714726206, 0.0298764563459, 0.0197693225341, 0.012305098829, 0.00720458011411, 0.00396791245399, 0.00205562963006, 0.00100174350955, 0.000459194357901, 0.000197999595192, 8.03080700402e-05};
static float offsets63[16] = {0.664958626784, 2.49040569838, 4.48273500375, 6.47507243712, 8.46742159066, 10.4597860346, 12.4521693104, 14.4445749245, 16.4370063418, 18.4294669793, 20.4219602006, 22.4144893094, 24.4070575442, 26.3996680733, 28.3923239891, 30.3850283039};

static int num_samples127 = 32;
static float weights127[32] = {0.0364469667069, 0.0480723287383, 0.046838490772, 0.0449632711932, 0.0425265528989, 0.0396286918776, 0.0363836751441, 0.032911726568, 0.0293320244392, 0.0257561342386, 0.0222826372398, 0.0189932710879, 0.0159507169609, 0.013197993604, 0.0107592718132, 0.00864181776165, 0.00683871624643, 0.00533201445897, 0.00409595619579, 0.00310003456598, 0.0023116656199, 0.00169836383466, 0.00122937305648, 0.000876766368688, 0.000616071765258, 0.000426506795461, 0.000290916147444, 0.000195504572323, 0.000129447367918, 8.44455443149e-05, 5.42759532288e-05, 3.43704627909e-05};
static float offsets127[32] = {0.666253434021, 2.4976763026, 4.49581741214, 6.49395863729, 8.49210002944, 10.4902416399, 12.4883835201, 14.4865257213, 16.4846682947, 18.4828112915, 20.480954763, 22.4790987602, 24.4772433343, 26.4753885362, 28.4735344169, 30.4716810271, 32.4698284178, 34.4679766395, 36.466125743, 38.4642757786, 40.4624267968, 42.4605788479, 44.458731982, 46.4568862493, 48.4550416996, 50.4531983828, 52.4513563486, 54.4495156464, 56.4476763256, 58.4458384356, 60.4440020253, 62.4421671438};

static int num_samples255 = 64;
static float weights255[64] = {0.0180507502663, 0.0240038715472, 0.0238514503339, 0.0236138843763, 0.0232937395031, 0.0228944459627, 0.0224202372467, 0.0218760753927, 0.0212675646085, 0.0206008553184, 0.0198825409268, 0.0191195497148, 0.0183190343367, 0.017488261363, 0.0166345032239, 0.0157649347538, 0.0148865363288, 0.0140060053309, 0.0131296773793, 0.0122634584516, 0.0114127686848, 0.0105824983093, 0.00977697584511, 0.0089999483776, 0.00825457344983, 0.00754342185745, 0.00686849042347, 0.00623122366133, 0.00563254311115, 0.0050728830546, 0.00455223127716, 0.0040701735502, 0.00362594054501, 0.00321845596224, 0.00284638475763, 0.00250818046267, 0.00220213073112, 0.00192640038372, 0.0016790713681, 0.00145817919442, 0.0012617455453, 0.00108780688744, 0.000934439029517, 0.000799777673968, 0.00068203509846, 0.000579513175118, 0.000490612992012, 0.000413841382777, 0.000347814697244, 0.000291260160044, 0.000243015166814, 0.000202024860553, 0.000167338315636, 0.000138103635675, 0.000113562245523, 9.30426287455e-05, 7.59537312614e-05, 6.17782207381e-05, 5.00657607298e-05, 4.04264293115e-05, 3.25243846601e-05, 2.60718551472e-05, 2.08235092967e-05, 1.65712415716e-05};
static float offsets255[64] = {0.666565523194, 2.49943111136, 4.49897600143, 6.4985208932, 8.49806578743, 10.4976106849, 12.4971555862, 14.4967004923, 16.4962454039, 18.4957903217, 20.4953352465, 22.4948801789, 24.4944251199, 26.4939700701, 28.4935150303, 30.4930600013, 32.4926049837, 34.4921499784, 36.4916949861, 38.4912400076, 40.4907850435, 42.4903300948, 44.489875162, 46.489420246, 48.4889653476, 50.4885104674, 52.4880556062, 54.4876007649, 56.487145944, 58.4866911445, 60.4862363669, 62.4857816122, 64.485326881, 66.4848721741, 68.4844174923, 70.4839628362, 72.4835082067, 74.4830536045, 76.4825990303, 78.4821444849, 80.4816899691, 82.4812354836, 84.4807810291, 86.4803266065, 88.4798722163, 90.4794178595, 92.4789635367, 94.4785092488, 96.4780549963, 98.4776007802, 100.477146601, 102.47669246, 104.476238357, 106.475784293, 108.47533027, 110.474876287, 112.474422346, 114.473968447, 116.473514591, 118.473060779, 120.472607012, 122.472153289, 124.471699613, 126.471245983};

cbuffer F : register(b0)
{
  float2 dim;
};

float3 Blur3(float2 uv, float2 pixelOfs)
{
  float3 col = float3(0,0,0);
  for (int i = 0; i < num_samples3; ++i)
  {
    float2 uvOfs = offsets3[i] * pixelOfs;
    col += weights3[i] * (Texture0.Sample(LinearSampler, uv + uvOfs).rgb + Texture0.Sample(LinearSampler, uv - uvOfs).rgb);
  }
  return col;
}

float3 Blur15(float2 uv, float2 pixelOfs)
{
  float3 col = float3(0,0,0);
  for (int i = 0; i < num_samples15; ++i)
  {
    float2 uvOfs = offsets15[i] * pixelOfs;
    col += weights15[i] * (Texture0.Sample(LinearSampler, uv + uvOfs).rgb + Texture0.Sample(LinearSampler, uv - uvOfs).rgb);
  }
  return col;
}

float3 Blur35(float2 uv, float2 pixelOfs)
{
  float3 col = float3(0,0,0);
  for (int i = 0; i < num_samples35; ++i)
  {
    float2 uvOfs = offsets35[i] * pixelOfs;
    col += weights35[i] * (Texture0.Sample(LinearSampler, uv + uvOfs).rgb + Texture0.Sample(LinearSampler, uv - uvOfs).rgb);
  }
  return col;
}

float3 Blur63(float2 uv, float2 pixelOfs)
{
  float3 col = float3(0,0,0);
  for (int i = 0; i < num_samples63; ++i)
  {
    float2 uvOfs = offsets63[i] * pixelOfs;
    col += weights63[i] * (Texture0.Sample(LinearSampler, uv + uvOfs).rgb + Texture0.Sample(LinearSampler, uv - uvOfs).rgb);
  }
  return col;
}

float3 Blur127(float2 uv, float2 pixelOfs)
{
  float3 col = float3(0,0,0);
  for (int i = 0; i < num_samples127; ++i)
  {
    float2 uvOfs = offsets127[i] * pixelOfs;
    col += weights127[i] * (Texture0.Sample(LinearSampler, uv + uvOfs).rgb + Texture0.Sample(LinearSampler, uv - uvOfs).rgb);
  }
  return col;
}

float3 Blur255(float2 uv, float2 pixelOfs)
{
  float3 col = float3(0,0,0);
  for (int i = 0; i < num_samples255; ++i)
  {
    float2 uvOfs = offsets255[i] * pixelOfs;
    col += weights255[i] * (Texture0.Sample(LinearSampler, uv + uvOfs).rgb + Texture0.Sample(LinearSampler, uv - uvOfs).rgb);
  }
  return col;
}

//------------------------------------------------------
// entry-point: ps
float4 PsBlur35(VSQuadOut p) : SV_Target
{
  float2 uv = p.uv.xy;
  float2 pixelOfs = float2(0, 1 / dim.y);

  return float4(Blur255(uv, pixelOfs), 1);
}

